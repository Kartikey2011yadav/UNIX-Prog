Both wildcards and regular expressions are used to define a search pattern. However, wildcards are a feature of the shell, while regular expressions are not.

Regular Expressions way of using a sequence of characters that define a search pattern.
Regular expressions are used with commands that support its usage and it has nothing to do with the shell.

Unix 

Regular expressions use its own set of special characters called metacharacters, which overshadows the wildcard characters used by the shell.
Quoting is used to ensure that the shell doesn't attempt to interpret the regular expression characters.

The asterisk character is used thrice in the command line. Here's the meaning of each occurrence:

The first asterisk is  as a regular expression metacharacter. It matches the longest string starting with botswana and ending with birds.

The second and third asterisks are interpreted as shell wildcard characters. They match all the files which contain the string .htm in their filename.

Thus, the command line searches for the lines matching the pattern starting with botswana and ending with birds, in all the files in the current directory, which contain the string .htm in their filename.

Use the following command line:

ls -l | grep "^-r-xr-xr-x"

This will give a ls long listing of all the ordinary files in the current directory which are not writable by any user.

P.S.: The following command line can be used to get just the desired file names without the excessive verbiage thrown by ls -l command. It uses two additional commands tr and cut in the command line.

ls -l | tr -s " " | grep "^-r-xr-xr-x" | cut -d " " -f9

The explanation of the above command line is as follows:

tr is translate characters command, and is used to compress all the occurrences of multiple consecutive space characters by a single space character.
hello this is extra line
cut command is used to extract the last item from every line where the items are separated by each other with a single space character.

The output of ls -l command is piped through the tr command to squeeze all the occurrences of multiple consecutive spaces by a single space so that the desired output can be easily extracted using the cut command.

While  is not. Refer to the tr command man page to learn more about it and the available options.

The command line displays the same number of lines as present in the file named foo. The mentioned Basic Regular Expression is trying to match occurrences of zero or more characters, which is technically every line in the file.

Removing the quotes would cause the .* pattern to be interpreted as wildcard by the shell instead. This wildcard expansion step (which is performed by the shell before the grep command is executed) would replace .* 
with all the file and directory names beginning with a . character.
This would include, at the minimum, the current and the parent directory names which are represented with . and .. respectively.

So the expanded command line would look like this:

grep . .. <FILE/DIRECTORY 1> <FILE/DIRECTORY 2> ... <FILE/DIRECTORY N> foo

where each one of <FILE/ 1> is a file or directory name beginning with a . character.

edit 

Now the above command line, when executed, tries to match the occurrence of . 
(the second token in the command line just after grep) in every file or directory that follows in the remainder of the command line. 
Since grep doesn't, an error message would be displayed on the standard output stating that an item is a directory. 
For any filenames, each of its lines are matched and outputted on the standard output with the filename prepended.
10 
Since the filename foo occurres as the last argument, every one of its line would be displayed too in a similar manner, but after the contents of all the hidden files listed before it are displayed.


